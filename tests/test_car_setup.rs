use binrw::BinRead;
use std::{error::Error, io::Cursor};

use f1_2021_rust::{Body, Packet};

static DATA_EXAMPLE: &[u8] = &[
    229, 7, 1, 5, 1, 5, 187, 134, 38, 178, 108, 178, 251, 17, 96, 124, 77, 68, 207, 65, 0, 0, 19,
    255, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8,
    2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177,
    65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134,
    235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177,
    65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236,
    81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65,
    154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153,
    153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65,
    205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0,
    64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58,
    205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65,
    8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8,
    1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6,
    0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235,
    209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65,
    154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81,
    184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65,
    154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153,
    153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65,
    205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0,
    64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58,
    205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65,
    8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8,
    1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6,
    0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235,
    209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65,
    154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81,
    184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65,
    154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153,
    153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65,
    205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0,
    64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58,
    205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65,
    8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8,
    1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6,
    0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235,
    209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65,
    154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153, 153, 191, 236, 81,
    184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65, 205, 204, 184, 65,
    154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0, 64, 192, 154, 153,
    153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58, 205, 204, 184, 65,
    205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65, 8, 8, 75, 75, 0, 0,
    64, 192, 154, 153, 153, 191, 236, 81, 184, 61, 134, 235, 209, 62, 8, 2, 8, 1, 3, 7, 95, 58,
    205, 204, 184, 65, 205, 204, 184, 65, 154, 153, 177, 65, 154, 153, 177, 65, 6, 0, 0, 160, 65,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
];

#[test]
fn test_car_setups() -> Result<(), Box<dyn Error>> {
    let pkt = Packet::read(&mut Cursor::new(DATA_EXAMPLE))?;

    // eprintln!("{:#?}", pkt);
    // assert!(false);

    assert!(matches!(pkt.body, Body::CarSetups(_)));

    Ok(())
}
