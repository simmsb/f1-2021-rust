use binrw::BinRead;
use std::{error::Error, io::Cursor};

use f1_2021_rust::{Body, Packet};

static DATA_EXAMPLE: &[u8] = &[
    229, 7, 1, 5, 1, 7, 243, 94, 175, 135, 75, 113, 93, 192, 190, 156, 21, 69, 238, 186, 0, 0, 19,
    255, 2, 1, 0, 60, 0, 192, 142, 214, 63, 0, 0, 220, 66, 56, 181, 83, 63, 200, 50, 204, 16, 9, 0,
    0, 0, 20, 18, 8, 0, 0, 36, 116, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 60, 0,
    15, 174, 213, 63, 0, 0, 220, 66, 114, 201, 82, 63, 200, 50, 171, 13, 9, 0, 0, 0, 19, 17, 5, 0,
    0, 36, 116, 74, 0, 97, 173, 158, 71, 21, 167, 148, 70, 52, 155, 119, 70, 0, 2, 1, 0, 60, 0, 4,
    165, 156, 63, 0, 0, 220, 66, 79, 240, 22, 63, 200, 50, 204, 16, 9, 0, 0, 0, 18, 16, 2, 0, 0,
    36, 116, 74, 0, 53, 204, 148, 71, 48, 196, 130, 70, 162, 69, 46, 70, 0, 2, 1, 0, 60, 0, 167,
    63, 214, 63, 0, 0, 220, 66, 56, 98, 83, 63, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18, 6, 0, 0, 36,
    116, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 60, 0, 38, 113, 219, 64, 0, 0, 220,
    66, 23, 232, 98, 64, 200, 50, 215, 14, 9, 0, 0, 0, 18, 16, 0, 0, 0, 36, 116, 74, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 60, 0, 170, 193, 227, 63, 0, 0, 220, 66, 198, 142, 97, 63,
    200, 50, 204, 16, 9, 0, 0, 0, 20, 18, 14, 0, 0, 36, 116, 74, 0, 0, 0, 0, 0, 41, 36, 168, 71,
    49, 167, 149, 69, 0, 0, 1, 1, 60, 0, 10, 220, 228, 64, 0, 0, 220, 66, 225, 201, 108, 64, 200,
    50, 215, 14, 9, 0, 0, 0, 19, 17, 1, 0, 173, 50, 113, 74, 1, 26, 110, 163, 72, 108, 154, 14, 73,
    114, 201, 58, 73, 0, 0, 1, 1, 60, 0, 163, 149, 27, 65, 0, 0, 220, 66, 38, 148, 161, 64, 200,
    50, 204, 16, 9, 0, 0, 0, 20, 18, 10, 0, 188, 111, 97, 74, 1, 0, 0, 0, 0, 123, 27, 160, 69, 223,
    92, 93, 72, 0, 0, 1, 1, 60, 0, 135, 175, 96, 65, 0, 0, 220, 66, 120, 22, 234, 64, 200, 50, 171,
    13, 9, 0, 0, 0, 20, 18, 4, 0, 143, 252, 114, 74, 1, 141, 239, 55, 73, 145, 135, 126, 73, 237,
    239, 189, 73, 0, 2, 1, 0, 60, 0, 223, 223, 244, 63, 0, 0, 220, 66, 26, 133, 115, 63, 200, 50,
    171, 13, 9, 0, 0, 0, 20, 18, 8, 0, 0, 36, 116, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 60, 0, 12, 0, 103, 65, 0, 0, 220, 66, 182, 182, 240, 64, 200, 50, 204, 16, 9, 0, 0, 0,
    20, 18, 0, 0, 8, 216, 107, 74, 1, 25, 10, 185, 72, 133, 64, 31, 73, 127, 232, 107, 73, 0, 0, 1,
    1, 60, 0, 21, 158, 251, 64, 0, 0, 220, 66, 160, 85, 130, 64, 200, 50, 204, 16, 9, 0, 0, 0, 19,
    17, 2, 0, 210, 61, 115, 74, 1, 220, 229, 87, 72, 32, 240, 35, 72, 214, 142, 141, 72, 0, 0, 1,
    1, 60, 0, 255, 44, 90, 65, 0, 0, 220, 66, 192, 65, 227, 64, 200, 50, 171, 13, 9, 0, 59, 0, 20,
    18, 0, 0, 9, 230, 114, 74, 1, 182, 243, 67, 72, 90, 85, 55, 72, 172, 19, 192, 72, 0, 0, 1, 1,
    60, 0, 153, 176, 123, 65, 0, 0, 220, 66, 61, 54, 3, 65, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18,
    3, 0, 135, 117, 102, 74, 1, 139, 155, 158, 68, 184, 194, 81, 71, 190, 74, 136, 72, 0, 2, 1, 0,
    60, 0, 187, 112, 11, 64, 0, 0, 220, 66, 5, 154, 139, 63, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18,
    8, 0, 0, 36, 116, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 60, 0, 52, 179, 1, 64,
    0, 0, 220, 66, 131, 97, 129, 63, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18, 7, 0, 0, 36, 116, 74, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 60, 0, 236, 242, 41, 65, 0, 0, 220, 66, 203,
    166, 176, 64, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18, 7, 0, 180, 252, 99, 74, 1, 238, 139, 1, 73,
    156, 79, 90, 73, 156, 20, 171, 73, 0, 0, 1, 1, 60, 0, 50, 210, 182, 64, 0, 0, 220, 66, 200,
    122, 60, 64, 200, 50, 204, 16, 9, 0, 0, 0, 19, 17, 3, 0, 168, 27, 114, 74, 1, 153, 106, 95, 72,
    243, 245, 212, 72, 105, 44, 252, 72, 0, 2, 1, 0, 60, 0, 182, 97, 0, 64, 0, 0, 220, 66, 193,
    254, 127, 63, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18, 8, 0, 0, 36, 116, 74, 0, 102, 48, 109, 71,
    82, 107, 7, 71, 132, 235, 27, 70, 0, 2, 1, 0, 60, 0, 0, 0, 160, 65, 0, 0, 220, 66, 41, 13, 39,
    65, 200, 50, 204, 16, 9, 0, 0, 0, 20, 18, 0, 0, 0, 36, 116, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0,
];

#[test]
fn test_car_status() -> Result<(), Box<dyn Error>> {
    let pkt = Packet::read(&mut Cursor::new(DATA_EXAMPLE))?;

    // eprintln!("{:#?}", pkt);
    // assert!(false);

    assert!(matches!(pkt.body, Body::CarStatus(_)));

    Ok(())
}
